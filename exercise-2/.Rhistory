library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
make <- select(vehicles, make)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
make <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
nrow(distinct(make$make))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
nrow(distinct(vehicles, make))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
nrow(distinct(vehicles, make))
# Filter the data set for vehicles manufactured in 1997
car_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
car_1997 <- arrange(car_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
car_1997
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
car_1997 <- mutate(car_1997, average = (hwy + cty) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheeler_20mpg <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(two_wheeler_20, hwy == min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(two_wheeler_mpg, hwy == min(hwy))
best <- function(year_choice, make_choice) {
filtered <- filter(vehicle, year == year_choice, make == make_choice)
filtered <- filter(filtered, hwy == max(hwy))
choice <- select(filtered, model)
choice
}
# What was the most efficient Honda model of 1995?
best(1995, "Honda")
best <- function(year_choice, make_choice) {
filtered <- filter(vehicles, year == year_choice, make == make_choice)
filtered <- filter(filtered, hwy == max(hwy))
choice <- select(filtered, model)
choice
}
# What was the most efficient Honda model of 1995?
best(1995, "Honda")
# Install (if needed) and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
acura <- filter(vehicles, make == "Acura", year == 2015)
best <- filter(acura, hwy == max(hwy))
best_acura <- select(best, model)
View(best_acura)
temp_var <- function() {
acura <- filter(vehicles, make == "Acura", year == 2015)
best <- filter(acura, hwy == max(hwy))
best_acura <- select(best, model)
}
nested <- function() {
best_model <- select(
filter(
filter(vehicles, make == "Acura", year == 2015, hwy == max(hwy)), model
)
)
}
pipe <- function() {
best <- filter(vehicles, make == "Acura", year == 2015, hwy == max(hwy)) %>%
filter(hwy == max(hwy)) %>%
select(model)
}
# USED TO CHECK RUNTIMES OF THE FUNCTIONS
system.time(for (i in 1:1000) temp_var())
system.time(for (i in 1:1000) nested())
system.time(for (i in 1:1000) pipe())
